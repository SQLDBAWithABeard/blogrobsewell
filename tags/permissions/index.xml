<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Permissions on Rob Sewell (aka SQL DBA With A Beard)</title><link>https://blog.robsewell.com/tags/permissions/</link><description>Recent content in Permissions on Rob Sewell (aka SQL DBA With A Beard)</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 23 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.robsewell.com/tags/permissions/index.xml" rel="self" type="application/rss+xml"/><item><title>Odd Error with Contained Database Users - look out for your 3rd party vendors</title><link>https://blog.robsewell.com/blog/odd-error-with-contained-database-users-look-out-for-your-3rd-party-vendors/</link><pubDate>Wed, 23 Apr 2025 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/odd-error-with-contained-database-users-look-out-for-your-3rd-party-vendors/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2025/contained.png" alt="Featured image of post Odd Error with Contained Database Users - look out for your 3rd party vendors" /&gt;&lt;h2 id="introduction"&gt;Introduction
&lt;/h2&gt;&lt;p&gt;A contained user can create a Windows login as its own account, although as it cannot grant connect permissions it is then is unable to connect at all.&lt;/p&gt;
&lt;p&gt;So if your vendor application is running as a contained user and during an upgrade it tries to create a login for itself, it will succeed in the creation but then be unable to connect to the SQL Server instance and the upgrade will fail&amp;hellip;&amp;hellip;&amp;hellip;. Sad Trombone.&lt;/p&gt;</description></item><item><title>#TSQL2sDay â€“ Get-PostRoundup</title><link>https://blog.robsewell.com/blog/tsql2sday-get-postroundup/</link><pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/tsql2sday-get-postroundup/</guid><description>&lt;!-- raw HTML omitted --&gt;</description></item><item><title>Export SQL User Permissions to T-SQL script using PowerShell and dbatools</title><link>https://blog.robsewell.com/blog/export-sql-user-permissions-to-t-sql-script-using-powershell-and-dbatools/</link><pubDate>Mon, 10 Apr 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/export-sql-user-permissions-to-t-sql-script-using-powershell-and-dbatools/</guid><description>&lt;p&gt;NOTE - Updated November 2022 for this site and the correct command name.&lt;/p&gt;
&lt;p&gt;There are times when DBAâ€™s are required to export database user permissions to a file. This may be for a number of reasons. Maybe for DR purposes, for auditing, for transfer to another database or instance. Sometimes we need to create a new user with the same permissions as another user or perhaps nearly the same permissions. I was having a conversation with my good friend and &lt;a class="link" href="https://twitter.com/claudioessilva" target="_blank" rel="noopener"
&gt;MVP ClÃ¡udio Silva&lt;/a&gt;Â and we were talking about how &lt;a class="link" href="https://docs.dbatools.io/Export-DbaUser" target="_blank" rel="noopener"
&gt;Export-DbaUser&lt;/a&gt; from &lt;a class="link" href="https://dbatools.io" target="_blank" rel="noopener"
&gt;dbatools&lt;/a&gt; could help in these situations and he suggested that I blogged about it so here it is.&lt;/p&gt;</description></item><item><title>Testing SQL Server Access to a share with PowerShell using dbatools</title><link>https://blog.robsewell.com/blog/testing-sql-server-access-to-a-share-with-powershell-using-dbatools/</link><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/testing-sql-server-access-to-a-share-with-powershell-using-dbatools/</guid><description>&lt;!-- raw HTML omitted --&gt;</description></item><item><title>Installing and upgrading default scripts automation - part one - Introduction</title><link>https://blog.robsewell.com/blog/installing-and-upgrading-default-scripts-automation-part-one-introduction/</link><pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/installing-and-upgrading-default-scripts-automation-part-one-introduction/</guid><description>&lt;p&gt;First I must say thank you to all of the wonderful people who have put time and effort into providing free tools and scripts to enable not only myself but all SQL DBAs to ease their work. For this series I especially thank&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Brent Ozar - &lt;a class="link" href="http://www.brentozar.com/" target="_blank" rel="noopener"
&gt;w&lt;/a&gt;|&lt;a class="link" href="https://twitter.com/BrentO" target="_blank" rel="noopener"
&gt;t&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ola Hallengren - &lt;a class="link" href="https://ola.hallengren.com/" target="_blank" rel="noopener"
&gt;w&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adam Mechanic - &lt;a class="link" href="http://sqlblog.com/blogs/adam_machanic/" target="_blank" rel="noopener"
&gt;b&lt;/a&gt;|&lt;a class="link" href="https://twitter.com/adammachanic" target="_blank" rel="noopener"
&gt;t&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jared Zagelbaum - &lt;a class="link" href="https://jaredzagelbaum.wordpress.com/" target="_blank" rel="noopener"
&gt;b&lt;/a&gt;|&lt;a class="link" href="https://twitter.com/JaredZagelbaum" target="_blank" rel="noopener"
&gt;t&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The aim of this series is to share the methodology and the scripts that I have used to resolve this issue.&lt;/p&gt;</description></item><item><title>Listing the SQL Server SysAdmins With PowerShell</title><link>https://blog.robsewell.com/blog/listing-the-sql-server-sysadmins-with-powershell/</link><pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/listing-the-sql-server-sysadmins-with-powershell/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2014/04/2014-04-12_152433.jpg" alt="Featured image of post Listing the SQL Server SysAdmins With PowerShell" /&gt;&lt;p&gt;A very short blog today just to pass on this little script.&lt;/p&gt;
&lt;p&gt;I was required to list all of the SysAdmins across a large estate. Obviously I turned to PowerShell ðŸ™‚&lt;/p&gt;
&lt;p&gt;I iterated through my server list collection and then created a server SMO object and used the EnumServerRoleMembers method to display all of the sysadmin members&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2014/04/2014-04-12_152433.jpg" target="_blank" rel="noopener"
&gt;&lt;img src="https://blog.robsewell.com/assets/uploads/2014/04/2014-04-12_152433.jpg"
loading="lazy"
alt="2014-04-12_152433"
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This will work on SQL2000 â€“ SQL2012. You can see how you can easily change the rolename in the script to enumerate other server roles.&lt;/p&gt;</description></item><item><title>Checking Drive Sizes with PowerShell</title><link>https://blog.robsewell.com/blog/checking-drive-sizes-with-powershell/</link><pubDate>Fri, 06 Sep 2013 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/checking-drive-sizes-with-powershell/</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src="https://blog.robsewell.com/assets/uploads/2013/09/image31.png"
loading="lazy"
alt="image"
&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2013/09/image32.png" target="_blank" rel="noopener"
&gt;&lt;img src="https://blog.robsewell.com/assets/uploads/2013/09/image32.png"
loading="lazy"
alt="image"
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and here are the results from my Azure VM. (See &lt;a class="link" href="https://blog.robsewell.com/spinning-up-and-shutting-down-windows-azure-lab-with-powershell/" target="_blank" rel="noopener"
&gt;My previous posts on how to create your own Azure VMs with PowerShell&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2013/09/image33.png" target="_blank" rel="noopener"
&gt;&lt;img src="https://blog.robsewell.com/assets/uploads/2013/09/image33.png"
loading="lazy"
alt="image"
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;#############################################################################
#
# NAME: Show-DriveSizes.ps1
# AUTHOR: Rob Sewell http://sqldbawiththebeard.com
# DATE:22/07/2013
#
# COMMENTS: Load function for displaying drivesizes
# USAGE: Show-DriveSizes server1
###########################################
Function Show-DriveSizes ([string]$Server) {
$Date = Get-Date
Write-Host -foregroundcolor DarkBlue -backgroundcolor yellow &amp;quot;$Server - - $Date&amp;quot;
#interogate wmi service and return disk information
$disks = Get-WmiObject -Class Win32_logicaldisk -Filter &amp;quot;Drivetype=3&amp;quot; -ComputerName $Server
$diskData = $disks | Select DeviceID, VolumeName ,
# select size in Gbs as int and label it SizeGb
@{Name = &amp;quot;SizeGB&amp;quot;; Expression = {$_.size / 1GB -as [int]}},
# select freespace in Gbs and label it FreeGb and two deciaml places
@{Name = &amp;quot;FreeGB&amp;quot;; Expression = {&amp;quot;{0:N2}&amp;quot; -f ($_.Freespace / 1GB)}},
# select freespace as percentage two deciaml places and label it PercentFree
@{Name = &amp;quot;PercentFree&amp;quot;; Expression = {&amp;quot;{0:P2}&amp;quot; -f ($_.Freespace / $_. Size)}}
$diskdata
}
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>SQL login object permissions via PowerShell</title><link>https://blog.robsewell.com/blog/sql-login-object-permissions-via-powershell/</link><pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/sql-login-object-permissions-via-powershell/</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;############################################################################# ################
#
# NAME: Show-SQLServerPermissions.ps1
# AUTHOR: Rob Sewell http://newsqldbawiththebeard.wordpress.com
# DATE:06/08/2013
#
# COMMENTS: Load function for Enumerating Server and Database Role permissions or object permissions
#
# USAGE Show-SQLServerPermissions Server1
# â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
Function Show-SQLServerPermissions ($SQLServer) {
$server = new-object &amp;quot;Microsoft.SqlServer.Management.Smo.Server&amp;quot; $SQLServer
$selected = &amp;quot;&amp;quot;
$selected = Read-Host &amp;quot;Enter Selection
1.) Role Membership or
2.) Object Permissions&amp;quot;
Switch ($Selected) {
1 {
Write-Host &amp;quot;#### Server Role Membership on $Server ############################################## `n`n&amp;quot;
foreach ($Role in $Server.Roles) {
if ($Role.EnumServerRoleMembers().count -ne 0) {
Write-Host &amp;quot;############### Server Role Membership for $role on $Server #########################`n&amp;quot;
$Role.EnumServerRoleMembers()
}
}
Write-Host &amp;quot;################################################################ ######################&amp;quot;
Write-Host &amp;quot;################################################################ ######################`n `n `n&amp;quot;
foreach ($Database in $Server.Databases) {
Write-Host &amp;quot;`n#### $Database Permissions on $Server ###############################################`n&amp;quot;
foreach ($role in $Database.Roles) {
if ($Role.EnumMembers().count -ne 0) {
Write-Host &amp;quot;########### Database Role Permissions for $Database $Role on $Server ################`n&amp;quot;
$Role.EnumMembers()
}
}
}
}
2 {
Write-Host &amp;quot;################## Object Permissions on $Server ################################`n&amp;quot;
foreach ($Database in $Server.Databases) {
Write-Host &amp;quot;`n#### Object Permissions on $Database on $Server #################################`n&amp;quot;
foreach ($user in $database.Users) {
foreach ($databasePermission in $database. EnumDatabasePermissions($user.Name)) {
Write-Host $databasePermission.PermissionState $databasePermission.PermissionType &amp;quot;TO&amp;quot; $databasePermission.Grantee
}
foreach ($objectPermission in $database. EnumObjectPermissions($user.Name)) {
Write-Host $objectPermission.PermissionState $objectPermission.PermissionType &amp;quot;ON&amp;quot; $objectPermission.ObjectName &amp;quot;TO&amp;quot; $objectPermission. Grantee
}
}
}
}
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;</description></item><item><title>Checking SQL Server User Role Membership with PowerShell</title><link>https://blog.robsewell.com/blog/checking-sql-server-user-role-membership-with-powershell/</link><pubDate>Mon, 02 Sep 2013 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/checking-sql-server-user-role-membership-with-powershell/</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;############################################################################# ################
#
# NAME: Show-SQLUserPermissions.ps1
# AUTHOR: Rob Sewell http://newsqldbawiththebeard.wordpress.com
# DATE:06/08/2013
#
# COMMENTS: Load function to Display the permissions a user has across the estate
# NOTE - Will not show permissions granted through AD Group Membership
#
# USAGE Show-SQLUserPermissions DBAwithaBeard
Function Show-SQLUserPermissions ($user)
{
[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | out-null
# Suppress Error messages - They will be displayed at the end
$ErrorActionPreference = &amp;quot;SilentlyContinue&amp;quot;
#cls
$Query = @&amp;quot;
SELECT
IL.ServerName
FROM [dbo].[InstanceList] IL
WHERE NotContactable = 0
AND Inactive = 0
AND DatabaseEngine = 'Microsoft SQL Server'
&amp;quot;@
Try
{
$Results = (Invoke-Sqlcmd -ServerInstance HMDBS02 -Database DBADatabase -Query $query -ErrorAction Stop).ServerName
}
catch
{
Write-Error &amp;quot;Unable to Connect to the DBADatabase - Please Check&amp;quot;
}
# Create an array for the username and each domain slash username
$logins = @(&amp;quot;DOMAIN1\$user&amp;quot;,&amp;quot;DOMAIN3\$user&amp;quot;, &amp;quot;DOMAIN4\$user&amp;quot; ,&amp;quot;$user&amp;quot; )
Write-Output &amp;quot;#################################&amp;quot;
Write-Output &amp;quot;Logins for `n $logins displayed below&amp;quot;
Write-Output &amp;quot;################################# `n&amp;quot;
#loop through each server and each database and display usernames, servers and databases
Write-Output &amp;quot; Server Logins&amp;quot;
foreach($server in $Results)
{
$srv = New-Object ('Microsoft.SqlServer.Management.Smo.Server') $server
foreach($login in $logins)
{
if($srv.Logins.Contains($login))
{
Write-Output &amp;quot;`n $server , $login &amp;quot;
foreach ($Role in $Srv.Roles)
{
$RoleMembers = $Role. EnumServerRoleMembers()
if($RoleMembers -contains $login)
{
Write-Output &amp;quot; $login is a member of $Role on $Server&amp;quot;
}
}
}
else
{
}
}
}
Write-Output &amp;quot;`n#########################################&amp;quot;
Write-Output &amp;quot;`n Database Logins&amp;quot;
foreach($server in $servers)
{
$srv = New-Object ('Microsoft.SqlServer.Management.Smo.Server') $server
foreach($database in $srv.Databases)
{
foreach($login in $logins)
{
if($database.Users.Contains($login))
{
Write-Output &amp;quot;`n $server , $database , $login &amp;quot;
foreach($role in $Database.Roles)
{
$RoleMembers = $Role.EnumMembers()
if($RoleMembers -contains $login)
{
Write-Output &amp;quot; $login is a member of $Role Role on $Database on $Server&amp;quot;
}
}
}
else
{
continue
}
}
}
}
Write-Output &amp;quot;`n#########################################&amp;quot;
Write-Output &amp;quot;Finished - If there are no logins displayed above then no logins were found!&amp;quot;
Write-Output &amp;quot;#########################################&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;</description></item></channel></rss>