<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pester on Rob Sewell (aka SQL DBA With A Beard)</title><link>https://blog.robsewell.com/tags/pester/</link><description>Recent content in Pester on Rob Sewell (aka SQL DBA With A Beard)</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 22 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.robsewell.com/tags/pester/index.xml" rel="self" type="application/rss+xml"/><item><title>.NET PowerShell Notebooks – Using Pester</title><link>https://blog.robsewell.com/blog/.net-powershell-notebooks-using-pester/</link><pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/.net-powershell-notebooks-using-pester/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/02/image-16.png" alt="Featured image of post .NET PowerShell Notebooks – Using Pester" /&gt;&lt;p&gt;&lt;a class="link" href="http://localhost:4001/blog/jupyter%20notebooks/azure%20data%20studio/powershell/pwsh/dbatools/dbachecks/new-net-notebooks-are-here-powershell-7-notebooks-are-here/" target="_blank" rel="noopener"
&gt;My last post&lt;/a&gt; had a lot of information about the new .NET PowerShell notebooks including installation instructions.&lt;/p&gt;
&lt;p&gt;.NET Notebooks are Jupyter Notebooks that use .NET core to enable C#, F# and PowerShell kernels.&lt;/p&gt;
&lt;h2 id="use-cases"&gt;Use Cases
&lt;/h2&gt;&lt;p&gt;One of the main benefits that I see for Jupyter Notebooks for Ops folk is that the results of the query are saved with the notebook. This makes them fantastic for Incident resolution.&lt;/p&gt;
&lt;p&gt;If you have an incident at 3am and you know that you will need that information in the wash up meeting the next day instead of copying and pasting results into a OneNote document or a text file, you can simply run the queries in a notebook and save it.&lt;/p&gt;</description></item><item><title>New .NET Notebooks are here – PowerShell 7 notebooks are here.</title><link>https://blog.robsewell.com/blog/new-.net-notebooks-are-here-powershell-7-notebooks-are-here./</link><pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/new-.net-notebooks-are-here-powershell-7-notebooks-are-here./</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/02/image-13.png" alt="Featured image of post New .NET Notebooks are here – PowerShell 7 notebooks are here." /&gt;&lt;p&gt;Data Science folk used Notebooks for documentation and to show re-runnable research. Azure Data Studio included this notebook functionality and &lt;a class="link" href="https://blog.robsewell.com/dbatools/dbachecks/blog/jupyter%20notebooks/azure%20data%20studio/powershell/whats-a-sql-notebook-in-azure-data-studio/" target="_blank" rel="noopener"
&gt;added SQL&lt;/a&gt; kernel where &lt;a class="link" href="https://blog.robsewell.com/blog/jupyter%20notebooks/azure%20data%20studio/powershell/dbachecks/dbatools/powershell-in-sql-notebooks-in-azure-data-studio//" target="_blank" rel="noopener"
&gt;with a little bit of faffing you could run PowerShell&lt;/a&gt; and then a &lt;a class="link" href="https://blog.robsewell.com/blog/jupyter%20notebooks/azure%20data%20studio/powershell/dbatools/powershell-notebooks-in-azure-data-studio/" target="_blank" rel="noopener"
&gt;Python kernel that enabled PowerShell&lt;/a&gt;. It seems that notebooks are so cool that everyone is creating them these days! I was browsing twitter when I saw this tweet.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.NET Notebooks Preview 2 is here! Preview 2 includes 🎉&lt;a class="link" href="https://twitter.com/PowerShell_Team?ref_src=twsrc%5Etfw" target="_blank" rel="noopener"
&gt;@PowerShell_Team&lt;/a&gt;, &lt;a class="link" href="https://twitter.com/nteractio?ref_src=twsrc%5Etfw" target="_blank" rel="noopener"
&gt;@nteractio&lt;/a&gt;, and a new tool. Check out our blog to learn more. Congratulations to &lt;a class="link" href="https://twitter.com/jonsequitur?ref_src=twsrc%5Etfw" target="_blank" rel="noopener"
&gt;@jonsequitur&lt;/a&gt; &lt;a class="link" href="https://twitter.com/colombod?ref_src=twsrc%5Etfw" target="_blank" rel="noopener"
&gt;@colombod&lt;/a&gt; and our entire team&lt;a class="link" href="https://t.co/WqNWQWR3Bo" target="_blank" rel="noopener"
&gt;https://t.co/WqNWQWR3Bo&lt;/a&gt;&lt;a class="link" href="https://twitter.com/dotnet?ref_src=twsrc%5Etfw" target="_blank" rel="noopener"
&gt;@dotnet&lt;/a&gt; &lt;a class="link" href="https://twitter.com/hashtag/jupyter?src=hash&amp;amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener"
&gt;#jupyter&lt;/a&gt; &lt;a class="link" href="https://twitter.com/hashtag/PowerShell?src=hash&amp;amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener"
&gt;#PowerShell&lt;/a&gt; &lt;a class="link" href="https://twitter.com/hashtag/interactiveprogramming?src=hash&amp;amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener"
&gt;#interactiveprogramming&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Using Docker to run Integration Tests for dbachecks</title><link>https://blog.robsewell.com/blog/using-docker-to-run-integration-tests-for-dbachecks/</link><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/using-docker-to-run-integration-tests-for-dbachecks/</guid><description>&lt;p&gt;My wonderful friend &lt;a class="link" href="https://twitter.com/AndreKamman" target="_blank" rel="noopener"
&gt;André Kamman&lt;/a&gt; wrote a fantastic blog post this week &lt;a class="link" href="https://andrekamman.com/sql-server-container-instances-via-cloudshell/" target="_blank" rel="noopener"
&gt;SQL Server Container Instances via Cloudshell&lt;/a&gt; about how he uses containers in Azure to test code against different versions of SQL Server.&lt;/p&gt;
&lt;p&gt;It reminded me that I do something very similar to test &lt;a class="link" href="http://dbachecks.io" target="_blank" rel="noopener"
&gt;dbachecks&lt;/a&gt; code changes. I thought this might make a good blog post. I will talk through how I do this locally as I merge a PR from another great friend &lt;a class="link" href="https://github.com/ClaudioESSilva" target="_blank" rel="noopener"
&gt;Cláudio Silva&lt;/a&gt; who has added &lt;a class="link" href="https://github.com/sqlcollaborative/dbachecks/pull/582" target="_blank" rel="noopener"
&gt;agent job history checks.&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Checking Trace Flags with dbachecks, online docs and PSPowerHour</title><link>https://blog.robsewell.com/blog/checking-trace-flags-with-dbachecks-online-docs-and-pspowerhour/</link><pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/checking-trace-flags-with-dbachecks-online-docs-and-pspowerhour/</guid><description>&lt;p&gt;It’s been a few weeks since i have blogged as I have been busy with a lot of other things. One of which is preparing for &lt;a class="link" href="https://www.pass.org/summit/2018/Sessions/Details.aspxsid=80306" target="_blank" rel="noopener"
&gt;my SQL Pass Summit pre-con&lt;/a&gt; which has lead to me improving the CI/CD for &lt;a class="link" href="http://dbachecks.io" target="_blank" rel="noopener"
&gt;dbachecks&lt;/a&gt; by adding auto-creation of online documentation, which you can find at &lt;a class="link" href="https://dbachecks.readthedocs.io" target="_blank" rel="noopener"
&gt;https://dbachecks.readthedocs.io&lt;/a&gt; or by running Get-Help with the -Online switch for any dbachecks command.&lt;/p&gt;
&lt;p&gt;Get-Help Invoke-DbcCheck -Online&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/01-online-help.png"
loading="lazy"
alt="01 - online help.png"
&gt;&lt;/p&gt;</description></item><item><title>Using the PowerShell AST to find a ForEach Method</title><link>https://blog.robsewell.com/blog/using-the-powershell-ast-to-find-a-foreach-method/</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/using-the-powershell-ast-to-find-a-foreach-method/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/08/server.png" alt="Featured image of post Using the PowerShell AST to find a ForEach Method" /&gt;&lt;p&gt;In &lt;a class="link" href="http://dbachecks.io" target="_blank" rel="noopener"
&gt;dbachecks&lt;/a&gt; we enable people to see what checks are available by running Get-DbcCheck. This gives a number of properties including the ‘type’ of check. This refers to the configuration item or parameter that is required to have a value for this check to run.&lt;/p&gt;
&lt;p&gt;For example – Any check to do with SQL Agent is of type Sqlinstance because it requires an instance to be specified but a check for SPN is of type ComputerName because it requires a computer name to run.&lt;/p&gt;</description></item><item><title>A PowerShell Pester Check for parsing SQL scripts</title><link>https://blog.robsewell.com/blog/a-powershell-pester-check-for-parsing-sql-scripts/</link><pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/a-powershell-pester-check-for-parsing-sql-scripts/</guid><description>&lt;p&gt;I like &lt;a class="link" href="https://blog.robsewell.com/?s=pester" target="_blank" rel="noopener"
&gt;to write Pester checks&lt;/a&gt; to make sure that all is as expected! This is just a quick post as much to help me remember this script 🙂&lt;/p&gt;
&lt;p&gt;This is a quick Pester test I wrote to ensure that some SQL Scripts in a directory would parse so there was some guarantee that they were valid T-SQL. It uses the SQLParser.dll and because it was using a build server without SQL Server I have to load the required DLLs from the &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
&gt;dbatools&lt;/a&gt; module (Thank you dbatools 🙂 )&lt;/p&gt;</description></item><item><title>Version Update, Code Signing and publishing to the PowerShell Gallery with VSTS</title><link>https://blog.robsewell.com/blog/version-update-code-signing-and-publishing-to-the-powershell-gallery-with-vsts/</link><pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/version-update-code-signing-and-publishing-to-the-powershell-gallery-with-vsts/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/05/32-Dashboard.png" alt="Featured image of post Version Update, Code Signing and publishing to the PowerShell Gallery with VSTS" /&gt;&lt;p&gt;At the fabulous &lt;a class="link" href="http://psconf.eu" target="_blank" rel="noopener"
&gt;PowerShell Conference EU&lt;/a&gt; I presented about Continuous Delivery to the PowerShell Gallery with VSTS and explained how we use VSTS to enable CD for &lt;a class="link" href="http://dbachecks.io" target="_blank" rel="noopener"
&gt;dbachecks&lt;/a&gt;. We even released a new version during the session 🙂&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;So how do we achieve this?&lt;/p&gt;
&lt;p&gt;We have a few steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a project and link to our GitHub&lt;/li&gt;
&lt;li&gt;Run unit uests with Pester to make sure that our code is doing what we expect.&lt;/li&gt;
&lt;li&gt;Update our module version and commit the change to GitHub&lt;/li&gt;
&lt;li&gt;Sign our code with a code signing certificate&lt;/li&gt;
&lt;li&gt;Publish to the PowerShell Gallery&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="create-project-and-link-to-github"&gt;Create Project and link to GitHub
&lt;/h2&gt;&lt;p&gt;First you need to create a VSTS project by going to &lt;a class="link" href="https://www.visualstudio.com/" target="_blank" rel="noopener"
&gt;https://www.visualstudio.com/&lt;/a&gt; This is free for up to 5 users with 1 concurrent CI/CD queue limited to a maximum of 60 minutes run time which should be more than enough for your PowerShell module.&lt;/p&gt;</description></item><item><title>Announcing dbachecks – Configurable PowerShell Validation For Your SQL Instances</title><link>https://blog.robsewell.com/blog/announcing-dbachecks-configurable-powershell-validation-for-your-sql-instances/</link><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/announcing-dbachecks-configurable-powershell-validation-for-your-sql-instances/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/02/09-PowerBi.png" alt="Featured image of post Announcing dbachecks – Configurable PowerShell Validation For Your SQL Instances" /&gt;&lt;p&gt;For the last couple of months members of the &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
&gt;dbatools&lt;/a&gt; team have been working on a new PowerShell module called &lt;a class="link" href="http://dbachecks.io" target="_blank" rel="noopener"
&gt;dbachecks&lt;/a&gt;. This open source PowerShell module will enable you to validate your SQL Instances. Today it is released for you all to start to use 🙂&lt;/p&gt;
&lt;h2 id="validate-your-sql-instances"&gt;Validate Your SQL Instances?
&lt;/h2&gt;&lt;p&gt;What do I mean by validate your SQL Instances? You want to know if your SQL Instances are (still) set up in the way that you want them to be or that you have not missed any configurations when setting them up. With dbachecks you can use any or all of the 80 checks to ensure one or many SQL Instances are as you want them to be. Using Pester, dbachecks will validate your SQL Instance(s) against default settings or ones that you configure yourself.&lt;/p&gt;</description></item><item><title>dbachecks – Configuration Deep Dive</title><link>https://blog.robsewell.com/blog/dbachecks-configuration-deep-dive/</link><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/dbachecks-configuration-deep-dive/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/02/03-autocomplete.png" alt="Featured image of post dbachecks – Configuration Deep Dive" /&gt;&lt;p&gt;Today is the day that &lt;a class="link" href="https://blog.robsewell.com/?p=8997" &gt;we have announced dbachecks&lt;/a&gt;  a PowerShell module enabling you to validate your SQL Instances. You can read more about it &lt;a class="link" href="https://blog.robsewell.com/?p=8997" &gt;here where you can learn how to install it and see some simple use cases&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="108-configurations"&gt;108 Configurations
&lt;/h2&gt;&lt;p&gt;One of the things I have been talking about &lt;a class="link" href="https://blog.robsewell.com/write-your-first-pester-test-today/" &gt;in my presentation “Green is Good Red is Bad”&lt;/a&gt; is configuring Pester checks so that you do not have to keep writing new tests for the same thing but with different values.&lt;/p&gt;</description></item><item><title>How to run a PowerShell script file with Verbose, Confirm or WhatIf</title><link>https://blog.robsewell.com/blog/how-to-run-a-powershell-script-file-with-verbose-confirm-or-whatif/</link><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/how-to-run-a-powershell-script-file-with-verbose-confirm-or-whatif/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/02-Showing-the-results.png" alt="Featured image of post How to run a PowerShell script file with Verbose, Confirm or WhatIf" /&gt;&lt;p&gt;Before you run a PowerShell command that makes a change to something you should check that it is going to do what you expect. You can do this by using the WhatIf parameter for commands that support it. For example, if you wanted to create a New SQL Agent Job Category you would use the &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
&gt;awesome dbatools module&lt;/a&gt; and write some code like this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;New-DbaAgentJobCategory -SqlInstance ROB-XPS -Category 'Backup'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;before you run it, you can check what it is going to do using&lt;/p&gt;</description></item><item><title>Pester 4.2.0 has a Because…… because :-)</title><link>https://blog.robsewell.com/blog/pester-4.2.0-has-a-because-because-/</link><pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/pester-4.2.0-has-a-because-because-/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/01-Because-1.png" alt="Featured image of post Pester 4.2.0 has a Because…… because :-)" /&gt;&lt;p&gt;I was going through my demo for the &lt;a class="link" href="http://meetu.ps/e/DdYV6/gHMdv/g" target="_blank" rel="noopener"
&gt;South Coast User Group meeting&lt;/a&gt; tonight and decided to add some details about the Because parameter available in the Pester pre-release version 4.2.0.&lt;/p&gt;
&lt;p&gt;To install a pre-release version you need to get the latest  &lt;a class="link" href="https://go.microsoft.com/fwlink/?linkid=846259" target="_blank" rel="noopener"
&gt;PowerShellGet&lt;/a&gt; module. This is pre-installed with PowerShell v6 but for earlier versions open PowerShell as administrator and run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Install-Module PowerShellGet
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can try out the Pester pre-release version (once you have the latest PowerShellGet) by installing it from the &lt;a class="link" href="http://powershellgallery.com" target="_blank" rel="noopener"
&gt;PowerShell Gallery&lt;/a&gt; with&lt;/p&gt;</description></item><item><title>Using the AST in Pester for dbachecks</title><link>https://blog.robsewell.com/blog/using-the-ast-in-pester-for-dbachecks/</link><pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/using-the-ast-in-pester-for-dbachecks/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/02-Pester-results-1.png" alt="Featured image of post Using the AST in Pester for dbachecks" /&gt;&lt;p&gt;TagLine – My goal – Chrissy will appreciate Unit Tests one day 🙂&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://dbatools.io/new-module-coming-soon/" target="_blank" rel="noopener"
&gt;Chrissy has written about dbachecks&lt;/a&gt; the new up and coming community driven open source PowerShell module for SQL DBAs to validate their SQL Server estate. we have taken some of the ideas that we have presented about a way of using &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
&gt;dbatools&lt;/a&gt; with &lt;a class="link" href="https://github.com/Pester/Pester" target="_blank" rel="noopener"
&gt;Pester&lt;/a&gt; to validate that everything is how it should be and placed them into a meta data driven framework to make things easy for anyone to use. It is looking really good and I am really excited about it. It will be released very soon.&lt;/p&gt;</description></item><item><title>Converting a Datarow to a JSON object with PowerShell</title><link>https://blog.robsewell.com/blog/converting-a-datarow-to-a-json-object-with-powershell/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/converting-a-datarow-to-a-json-object-with-powershell/</guid><description>&lt;p&gt;This is just a quick post. As is frequent with these they are as much for me to refer to in the future and also because the very act of writing it down will aid me in remembering. I encourage you to do the same. Share what you learn because it will help you as well as helping others.&lt;/p&gt;
&lt;p&gt;Anyway, I was writing some Pester tests for a module that I was writing when I needed some sample data. I have &lt;a class="link" href="https://blog.robsewell.com/writing-dynamic-and-random-tests-cases-for-pester/" target="_blank" rel="noopener"
&gt;written before about using Json for this purpose&lt;/a&gt; This function required some data from a database so I wrote the query to get the data and used &lt;a class="link" href="https://dbatools.io" target="_blank" rel="noopener"
&gt;dbatools&lt;/a&gt; to run the query against the database using &lt;a class="link" href="https://dbatools.io/functions/Get-DbaDatabase" target="_blank" rel="noopener"
&gt;Get-DbaDatabase&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Handling Missing Instances when Looping with Pester</title><link>https://blog.robsewell.com/blog/handling-missing-instances-when-looping-with-pester/</link><pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/handling-missing-instances-when-looping-with-pester/</guid><description>&lt;p&gt;In my previous posts about &lt;a class="link" href="https://blog.robsewell.com/write-your-first-pester-test-today/" target="_blank" rel="noopener"
&gt;writing your first Pester Test&lt;/a&gt; and &lt;a class="link" href="https://blog.robsewell.com/2-ways-to-loop-through-collections-in-pester/" target="_blank" rel="noopener"
&gt;looping through instances&lt;/a&gt; I described how you can start to validate that your SQL Server is how YOU want it to be.&lt;/p&gt;
&lt;h2 id="unavailable-machines"&gt;Unavailable machines
&lt;/h2&gt;&lt;p&gt;Once you begin to have a number of tests for a number of instances you want to be able to handle any machines that are not available cleanly otherwise you might end up with something like this.&lt;/p&gt;</description></item><item><title>2 Ways to Loop through collections in Pester</title><link>https://blog.robsewell.com/blog/2-ways-to-loop-through-collections-in-pester/</link><pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/2-ways-to-loop-through-collections-in-pester/</guid><description>&lt;p&gt;In my last post I showed you &lt;a class="link" href="https://blog.robsewell.com/write-your-first-pester-test-today/" target="_blank" rel="noopener"
&gt;how to write your first Pester test&lt;/a&gt; to validate something. Here’s a recap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decide the information you wish to test&lt;/li&gt;
&lt;li&gt;Understand how to get it with PowerShell&lt;/li&gt;
&lt;li&gt;Understand what makes it pass and what makes it fail&lt;/li&gt;
&lt;li&gt;Write a Pester Test&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You probably have more than one instance that you want to test, so how do you loop through a collection of instances? There are a couple of ways.&lt;/p&gt;</description></item><item><title>2 Ways to Loop through collections in Pester</title><link>https://blog.robsewell.com/blog/2-ways-to-loop-through-collections-in-pester/</link><pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/2-ways-to-loop-through-collections-in-pester/</guid><description>&lt;p&gt;In my last post I showed you &lt;a class="link" href="https://blog.robsewell.com/write-your-first-pester-test-today/" target="_blank" rel="noopener"
&gt;how to write your first Pester test&lt;/a&gt; to validate something. Here’s a recap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decide the information you wish to test&lt;/li&gt;
&lt;li&gt;Understand how to get it with PowerShell&lt;/li&gt;
&lt;li&gt;Understand what makes it pass and what makes it fail&lt;/li&gt;
&lt;li&gt;Write a Pester Test&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You probably have more than one instance that you want to test, so how do you loop through a collection of instances? There are a couple of ways.&lt;/p&gt;</description></item><item><title>Write Your first Pester Test Today</title><link>https://blog.robsewell.com/blog/write-your-first-pester-test-today/</link><pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/write-your-first-pester-test-today/</guid><description>&lt;p&gt;I was in Glasgow this Friday enjoying the fantastic hospitality of the &lt;a class="link" href="http://sqlglasgow.co.uk" target="_blank" rel="noopener"
&gt;Glasgow SQL User Group&lt;/a&gt; &lt;a class="link" href="https://twitter.com/SqlGlasgow" target="_blank" rel="noopener"
&gt;@SQLGlasgow&lt;/a&gt; and presenting sessions with &lt;a class="link" href="https://twitter.com/AndreKamman" target="_blank" rel="noopener"
&gt;Andre Kamman&lt;/a&gt;, &lt;a class="link" href="https://twitter.com/sql_williamd" target="_blank" rel="noopener"
&gt;William Durkin&lt;/a&gt;, and &lt;a class="link" href="https://twitter.com/cl" target="_blank" rel="noopener"
&gt;Chrissy LeMaire&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I presented “Green is Good Red is Bad – Turning your checklists into Pester Tests”. I had to make sure I had enough energy beforehand so I treated myself to a fabulous burger.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blog.robsewell.com/assets/uploads/2017/11/20171110_114933-compressor.jpg?resize=630%2C354&amp;amp;ssl=1"
loading="lazy"
alt="20171110_114933-compressor.jpg"
&gt;&lt;/p&gt;
&lt;p&gt;Afterwards I was talking to some of the attendees and realised that maybe I could show how easy it was to start writing your first Pester test. Here are the steps to follow so that you can write your first Pester test:&lt;/p&gt;</description></item><item><title>A Pretty PowerBi Pester Results Template File</title><link>https://blog.robsewell.com/blog/power-bi/powershell/a-pretty-powerbi-pester-results-template-file/</link><pubDate>Sun, 29 Oct 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/power-bi/powershell/a-pretty-powerbi-pester-results-template-file/</guid><description>&lt;!-- raw HTML omitted --&gt;</description></item><item><title>#TSQL2sDay – Get-PostRoundup</title><link>https://blog.robsewell.com/blog/tsql2sday-get-postroundup/</link><pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/tsql2sday-get-postroundup/</guid><description>&lt;!-- raw HTML omitted --&gt;</description></item><item><title>Presentation Nerves</title><link>https://blog.robsewell.com/blog/presentation-nerves/</link><pubDate>Tue, 08 Aug 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/presentation-nerves/</guid><description>&lt;!-- raw HTML omitted --&gt;</description></item><item><title>Writing Dynamic and Random Tests Cases for Pester</title><link>https://blog.robsewell.com/blog/writing-dynamic-and-random-tests-cases-for-pester/</link><pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/writing-dynamic-and-random-tests-cases-for-pester/</guid><description>&lt;!-- raw HTML omitted --&gt;</description></item><item><title>Creating a PowerShell Module and TDD for Get-SQLDiagRecommendations</title><link>https://blog.robsewell.com/blog/creating-a-powershell-module-and-tdd-for-get-sqldiagrecommendations/</link><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/creating-a-powershell-module-and-tdd-for-get-sqldiagrecommendations/</guid><description>&lt;!-- raw HTML omitted --&gt;</description></item><item><title>VSCode – PowerShell extension 1.4.0 new command Out-CurrentFile</title><link>https://blog.robsewell.com/blog/vscode-powershell-extension-1.4.0-new-command-out-currentfile/</link><pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/vscode-powershell-extension-1.4.0-new-command-out-currentfile/</guid><description>&lt;!-- raw HTML omitted --&gt;</description></item><item><title>Pester for Presentations – Ensuring it goes ok</title><link>https://blog.robsewell.com/blog/pester-for-presentations-ensuring-it-goes-ok/</link><pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/pester-for-presentations-ensuring-it-goes-ok/</guid><description>&lt;p&gt;Whilst I was at &lt;a class="link" href="http://psconf.eu" target="_blank" rel="noopener"
&gt;PSCONFEU&lt;/a&gt; I presented a session on writing pester tests instead of using checklists.
&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/uvT57pt8"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;You can see it here.&lt;/p&gt;
&lt;p&gt;During the talk I showed the pester test that I use to make sure that everything is ready for my presentation. A couple of people have asked me about this and wanted to know more so I thought that I would blog about it.&lt;/p&gt;
&lt;p&gt;Some have said that I might be being a little OCD about it 😉 I agree that it could seem like that but there is nothing worse than having things go wrong during your presentation. It makes your heart beat faster and removes the emphasis from the presentation that you give.&lt;/p&gt;</description></item><item><title>Pester Test Inception and the Show Parameter</title><link>https://blog.robsewell.com/blog/pester-test-inception-and-the-show-parameter/</link><pubDate>Tue, 09 May 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/pester-test-inception-and-the-show-parameter/</guid><description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src="https://blog.robsewell.com/assets/uploads/2017/05/c_edtk0xoaa1pl7-2.jpg"
loading="lazy"
alt="C_EDtK0XoAA1PL7 (2).jpg"
&gt;&lt;/p&gt;
&lt;p&gt;and whilst we were there we were chatting about running Pester Tests. He wanted to know how he could run a Pester Test and not lose the failed tests as they scrolled past him. In his particular example we were talking about running hundreds of tests on thousands of databases on hundreds of servers&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blog.robsewell.com/assets/uploads/2017/05/01-pesters.gif"
loading="lazy"
alt="01 - pesters.gif"
&gt;&lt;/p&gt;
&lt;p&gt;I guess it looks something like that!!&lt;/p&gt;</description></item><item><title>Test the SQL Server database collation with PowerShell and dbatools</title><link>https://blog.robsewell.com/blog/test-the-sql-server-database-collation-with-powershell-and-dbatools/</link><pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/test-the-sql-server-database-collation-with-powershell-and-dbatools/</guid><description>&lt;!-- raw HTML omitted --&gt;</description></item><item><title>Using Pester with dbatools Test-DbaLastBackup</title><link>https://blog.robsewell.com/blog/using-pester-with-dbatools-test-dbalastbackup/</link><pubDate>Sat, 25 Mar 2017 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/using-pester-with-dbatools-test-dbalastbackup/</guid><description>&lt;!-- raw HTML omitted --&gt;</description></item><item><title>PowerShell, Pester and Ola Hallengrens Maintenance Solution</title><link>https://blog.robsewell.com/blog/powershell-pester-and-ola-hallengrens-maintenance-solution/</link><pubDate>Sat, 24 Sep 2016 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/powershell-pester-and-ola-hallengrens-maintenance-solution/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2016/09/pester-ola-check.png" alt="Featured image of post PowerShell, Pester and Ola Hallengrens Maintenance Solution" /&gt;&lt;p&gt;If you are a SQL DBA you will have heard of &lt;a class="link" href="https://ola.hallengren.com/" target="_blank" rel="noopener"
&gt;Ola Hallengrens Maintenance solution&lt;/a&gt; If you haven’t go and click the link and look at the easiest way to ensure that all of your essential database maintenance is performed. You can also &lt;a class="link" href="https://sqlbits.com/Sessions/Event9/Inside_Ola_Hallengrens_Maintenance_Solution" target="_blank" rel="noopener"
&gt;watch a video from Ola at SQL Bits&lt;/a&gt;
Recently I was thinking about how I could validate that this solution was installed in the way that I wanted it to be so I turned to &lt;a class="link" href="https://github.com/pester/Pester" target="_blank" rel="noopener"
&gt;Pester&lt;/a&gt; You can find a great &lt;a class="link" href="https://mcpmag.com/articles/2016/05/19/test-powershell-modules-with-pester.aspx" target="_blank" rel="noopener"
&gt;how to get started here&lt;/a&gt; which will show you how to get Pester and how to get started with TDD.
This isn’t TDD though this is Environment Validation and this is how I went about creating my test.
First I thought about what I would look for in SSMS when I had installed the maintenance solution and made a list of the things that I would check which looked something like this. This would be the checklist you would create (or have already created) for yourself or a junior following this install. This is how easy you can turn that checklist into a Pester Test and remove the human element and open your install for automated testing&lt;/p&gt;</description></item><item><title>Some Pester Tests for SQL Defaults</title><link>https://blog.robsewell.com/blog/some-pester-tests-for-sql-defaults/</link><pubDate>Tue, 24 May 2016 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/some-pester-tests-for-sql-defaults/</guid><description>&lt;p&gt;When I was at &lt;a class="link" href="http://www.psconf.eu/" target="_blank" rel="noopener"
&gt;PowerShell Conference EU&lt;/a&gt; in Hannover last month (The videos are available now – &lt;a class="link" href="https://www.youtube.com/c/powershellconferenceeu" target="_blank" rel="noopener"
&gt;click here&lt;/a&gt; and the &lt;a class="link" href="https://github.com/psconfeu/2016" target="_blank" rel="noopener"
&gt;slides and code here&lt;/a&gt;) I found out about &lt;a class="link" href="https://pshirwin.wordpress.com/2016/04/08/active-directory-operations-test/" target="_blank" rel="noopener"
&gt;Irwin Strachans Active Directory Operations Test&lt;/a&gt; which got me thinking.&lt;/p&gt;
&lt;p&gt;I decided to do the same for my usual SQL Set-up. Treating all of your servers to the same defaults makes it even easier to manage at scale remotely.&lt;/p&gt;
&lt;p&gt;I am comfortable with using SMO to gather and change properties on SQL Instances so I started by doing this&lt;/p&gt;</description></item><item><title>PowerShell Pester – The script failed due to call depth overflow.</title><link>https://blog.robsewell.com/blog/powershell-pester-the-script-failed-due-to-call-depth-overflow./</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/powershell-pester-the-script-failed-due-to-call-depth-overflow./</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2016/01/pester-success_thumb1.jpg" alt="Featured image of post PowerShell Pester – The script failed due to call depth overflow." /&gt;&lt;p&gt;This error caught me out. I am putting this post here firstly to remind me if I do it again and also to help others who may hit the same issue.&lt;/p&gt;
&lt;p&gt;I also have been looking at &lt;a class="link" href="https://github.com/pester/Pester" target="_blank" rel="noopener"
&gt;Pester&lt;/a&gt; which is a framework for running unit tests within PowerShell&lt;/p&gt;
&lt;p&gt;You will find some good blog posts about starting with Pester here&lt;/p&gt;
&lt;p&gt;So I created a function script file &lt;code&gt;Create-HyperVFromBase.ps1&lt;/code&gt; and a tests script file &lt;code&gt;Create-HyperVFromBase.tests.ps1&lt;/code&gt; as shown.&lt;/p&gt;</description></item><item><title>PowerShell Pester Testing for Parameter Validation</title><link>https://blog.robsewell.com/blog/powershell-pester-testing-for-parameter-validation/</link><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>https://blog.robsewell.com/blog/powershell-pester-testing-for-parameter-validation/</guid><description>&lt;p&gt;This error caught me out. I am putting this post here firstly to remind me if I do it again adn also to help others who may hit the same issue.&lt;/p&gt;
&lt;p&gt;Today I am rewriting a function to create a Hyper-V VM so that I can properly script the creation of my labs for demos and other things. I am doing this because I want to use DSC to create an availability group and want to be able to tear down and recreate the machines (but thats for another day)&lt;/p&gt;</description></item></channel></rss>